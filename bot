import telebot
from telebot import types
import openpyxl
import random
from transliterate import translit
import datetime


stickers_id = []
operators_id = [198384562, 829591706, 523811214]
admins_id = [198384562, 829591706, 523811214]
monday_menu = {}
tuesday_menu = {}
wednesday_menu = {}
thursday_menu = {}
friday_menu = {}
bill_list = []
days_suff = {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫': '–≤—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞': '—Å—Ä–µ–¥—É', '–ß–µ—Ç–≤–µ—Ä–≥': '—á–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞': '–ø—è—Ç–Ω–∏—Ü—É'}
excel_days_cells = {'monday': (3, 6, 4), 'tuesday': (10, 13, 11), 'wednesday': (17, 20, 18), 'thursday': (24, 27, 25), 'friday': (31, 34, 32)}
days_with_menu = [monday_menu, tuesday_menu, wednesday_menu, thursday_menu, friday_menu]
days_for_sort = {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 1, '–í—Ç–æ—Ä–Ω–∏–∫': 2, '–°—Ä–µ–¥–∞': 3, '–ß–µ—Ç–≤–µ—Ä–≥': 4, '–ü—è—Ç–Ω–∏—Ü–∞': 5}
just_days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
emojis = {'—Å—É–ø': 'üç≤', '—Å–∞–ª–∞—Ç': 'ü•ó', '—Ñ–∞–ª–∞—Ñ–µ–ª—å': 'üßÜ', '–æ–º–ª–µ—Ç': 'üç≥', '–∫–∞—à–∞': 'ü•£', '–±—É—Ç–µ—Ä–±—Ä–æ–¥': 'ü•™', '–∫–µ–∫—Å': 'üçÆ',
          '–ø–µ—á–µ–Ω—å–µ': 'üç™', '–∫–∞—Ä—Ç–æ—Ñ–µ–ª—å': 'üçü', '—Ä–∏—Å': 'üçö', '–∫—É—Ä–∏—Ü–∞': 'üçó', '–±–ª–∏–Ω—ã': 'ü•û', '–º–∞–∫–∞—Ä–æ–Ω—ã': 'üçù', '—Ä–∞–≥—É': 'ü•ò',
          '–ø–∞–Ω–∫–µ–π–∫': 'ü•û', '—Ü–µ–∑–∞—Ä—å': 'ü•ó', '–±–æ—Ä—â': 'üç≤', '–≥—Ä–µ—á–∫–∞': 'üçõ'}


# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä ID –∑–∞–∫–∞–∑–∞
def id_generator(name):
    numbers = '1234567890'
    digits = 'qwertyuioplkjhgfdsazxcvbnm'
    up_digits = 'QWERTYUIOPLKJHGFDSAZXCVBNM'
    all = [numbers, digits, up_digits]
    new_id = name[:3]
    while len(new_id) < 9:
        rand_list = random.choice(all)
        new_id += random.choice(rand_list)
    return(new_id)


# –¢—Ä–∞–Ω—Å–ª–∏—Ç  –∏–º–µ–Ω–∏
def translit_name(name):
    flag_name = False
    if name == None:
        return('_')
    for i in name:
        if i.lower() in '–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö–∂—ä—ç–¥–ª–æ—Ä–ø–∞–≤—ã—Ñ—è—á—Å–º–∏—Ç—å–±—é':
            flag_name = True
            break
    if flag_name == True:
        first_name = translit(name, 'ru', reversed=True)
        return(first_name)
    else:
        return(name)


# Excel —Ñ–∞–π–ª
file = openpyxl.open('–ú–µ–Ω—é.xlsx')
file_list = file.active


# –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é
def create_menu(excel_day_cells):
    count = -1
    for j in excel_days_cells:
        count += 1
        for i in range(1, file_list.max_row + 1):
            name = file_list.cell(row=i, column=excel_days_cells[j][0]).value
            price = file_list.cell(row=i, column=excel_days_cells[j][1]).value
            if name == None or price == None:
                continue
            else:
                if len(name) > 40:
                    name = name[:40] + '...'
                else:
                    temp_name = name.split()
                    for q in temp_name:
                        if q.lower() in emojis:
                            name += ' ' + emojis[q.lower()]
                            break
                temp = price, i, excel_days_cells[j][2]
                days_with_menu[count].setdefault(name, temp)
    print('–ú–µ–Ω—é —Å–æ–∑–¥–∞–Ω–æ')
create_menu(excel_days_cells)



# Telegram Bot
bot = telebot.TeleBot('5200793738:AAGsgT7R28uVgAjD3i4DAbfd_PYSksgeYfQ')


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.message_handler(commands=['start'])
@bot.message_handler(func=lambda msg: msg.text == '–ù–∞–∑–∞–¥' or msg.text == '–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' or msg.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞' or msg.text == '–ù–∞–∑–∞–¥ –≤ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞')
def start(message):
    if message.from_user.id not in admins_id or message.text == '–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è':
        start_menu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        menu_button = types.KeyboardButton(text='–ú–µ–Ω—é')
        pay_button = types.KeyboardButton(text='–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑')
        order_button = types.KeyboardButton(text='–ú–æ–π –∑–∞–∫–∞–∑')
        admin_menu_button = types.KeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞')
        if message.from_user.id in admins_id:
            start_menu.add(menu_button, order_button, pay_button, admin_menu_button)
        else:
            start_menu.add(menu_button, order_button, pay_button)
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é ‚¨á', reply_markup=start_menu)
    elif message.from_user.id in admins_id or (message.from_user.id in admins_id and message.text == '–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞') or (message.from_user.id in admins_id and message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞') or (message.from_user.id in admins_id and message.text == '–ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É —Ä–µ–∂–∏–º–∞'):
        start_admin_menu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
        admin_button = types.KeyboardButton(text='–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
        user_button = types.KeyboardButton(text='–†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        start_admin_menu.add(admin_button, user_button)
        bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ë–æ—Å—Å üåö', reply_markup=start_admin_menu)


# –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@bot.message_handler(func=lambda msg: msg.text == '–†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
def admin_console(message):
    admin_console = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    orders_button = types.KeyboardButton(text='–í—Å–µ –∑–∞–∫–∞–∑—ã')
    pay_button = types.KeyboardButton(text='–ß–µ–∫–∏')
    back_admin_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥ –≤ –≤—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞')
    logs_button = types.KeyboardButton(text='–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏')
    change_menu_button = types.KeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é')
    admin_console.add(orders_button, pay_button, logs_button,change_menu_button, back_admin_button)
    bot.send_message(message.chat.id, '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ, –ë–æ—Å—Å? üåù', reply_markup=admin_console)


# –ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é
@bot.message_handler(func=lambda msg: msg.text == '–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é')
def change_menu(message):
    bot.send_message(message.chat.id, '–ü—Ä–∏—à–ª–∏ excel —Ñ–∞–π–ª —Å –º–µ–Ω—é. –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è "–ú–µ–Ω—é"')


@bot.message_handler(func=lambda msg: msg.document.file_name == '–ú–µ–Ω—é.xlsx', content_types=['document'])
def get_document(message):
    print(message.document.file_name)


# –í—Å–µ –∑–∞–∫–∞–∑—ã
@bot.message_handler(func=lambda msg: msg.text == '–í—Å–µ –∑–∞–∫–∞–∑—ã')
def admin_orders(message):
    with open('–ó–∞–∫–∞–∑—ã.txt', 'r') as orders:
        orders_text = orders.readlines()
        names_list = []
        for i in orders_text:
            temp = i.split('|')
            if temp[1] not in names_list:
                names_list.append(temp[1])
        names_menu = types.InlineKeyboardMarkup()
        for i in names_list:
            name_button = types.InlineKeyboardButton(text=i, callback_data=f'name_order: {i}')
            names_menu.add(name_button)
        bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ —á—å—ë –º–µ–Ω—é –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å', reply_markup=names_menu)


# –í—Å–µ –º–µ–Ω—é –æ–¥–Ω–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
@bot.callback_query_handler(func=lambda msg: msg.data[:11] == 'name_order:')
def admin_person_order(callback):
    with open('–ó–∞–∫–∞–∑—ã.txt', 'r') as orders:
        text_orders = orders.readlines()
        name_callback = callback.data[12:]
        temp_list = []
        for i in range(len(text_orders)):
            text_orders[i] = text_orders[i].strip().split('|')
        for i in text_orders:
            if i[1] == name_callback:
                temp_list.append(i)
        temp_list = sorted(temp_list, key=lambda x: days_for_sort[x[0]])
        bot.send_message(callback.message.chat.id, name_callback)
        all_suma = 0
        for j in just_days:
            day_sum = 0
            counter = 0
            text_to_edit = bot.send_message(callback.message.chat.id, f'<b>{j}</b>', parse_mode='HTML')
            for i in temp_list:
                if i[0] == j:
                    counter += 1
                    bot.send_message(callback.message.chat.id, f'{counter}. {i[2]} <i>{i[3]}</i>', parse_mode='HTML')
                    day_sum += int(i[3])
                    all_suma += int(i[3])
            bot.edit_message_text(chat_id=callback.message.chat.id, message_id=text_to_edit.message_id, text=f'<b>{j}:</b>\n–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: <b>{day_sum}</b> ‚ÇΩ', parse_mode='HTML')
        bot.send_message(callback.message.chat.id, f'–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –∑–∞ –Ω–µ–¥–µ–ª—é: <b>{all_suma}</b> ‚ÇΩ', parse_mode='HTML')


# –§–∞–π–ª —Å –ª–æ–≥–∞–º–∏
@bot.message_handler(func=lambda msg: msg.text == '–§–∞–π–ª —Å –ª–æ–≥–∞–º–∏')
def logs_file(message):
    with open('–õ–æ–≥–∏.txt', 'rb') as logs_file:
        bot.send_document(message.chat.id, logs_file)


# –ß–µ–∫–∏
@bot.message_handler(func=lambda msg: msg.text == '–ß–µ–∫–∏')
def admin_bills(message):
    for i in bill_list:
        bot.send_message(message.chat.id, '–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ')


# InLine-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
@bot.message_handler(func=lambda msg: msg.text == '–ú–µ–Ω—é')
def menu(message):
    menu_week = types.InlineKeyboardMarkup(row_width=1)
    monday = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    tuesday = types.InlineKeyboardButton(text='–í—Ç–æ—Ä–Ω–∏–∫', callback_data='–í—Ç–æ—Ä–Ω–∏–∫')
    wednesday = types.InlineKeyboardButton(text='–°—Ä–µ–¥–∞', callback_data='–°—Ä–µ–¥–∞')
    thursday = types.InlineKeyboardButton(text='–ß–µ—Ç–≤–µ—Ä–≥', callback_data='–ß–µ—Ç–≤–µ—Ä–≥')
    friday = types.InlineKeyboardButton(text='–ü—è—Ç–Ω–∏—Ü–∞', callback_data='–ü—è—Ç–Ω–∏—Ü–∞')
    menu_week.add(monday, tuesday, wednesday, thursday, friday)
    menu_food = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    excel_button = types.KeyboardButton(text='–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ Excel')
    back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
    menu_food.add(excel_button, back_button)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–µ–Ω—é –∏ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', reply_markup=menu_food)
    bot.send_message(message.chat.id, '–î–Ω–∏ –Ω–µ–¥–µ–ª–∏:', reply_markup=menu_week)


# –§–∞–π–ª —Å excel –º–µ–Ω—é
@bot.message_handler(func=lambda msg: msg.text == '–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ Excel')
def menu_excel(message):
    with open('–ú–µ–Ω—é.xlsx', 'rb') as excel:
        bot.send_document(message.chat.id, excel)


# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –µ–¥—ã
@bot.callback_query_handler(func=lambda msg: msg.data != '–ù–∞–∑–∞–¥' and msg.data[:3] != 'del' and msg.data[:11] != 'name_order:')
def callback_all(callback):

    # –†–µ–∞–∫—Ü–∏–∏ –Ω–∞ –≤—ã–±–æ—Ä –±–ª—é–¥–∞
    if callback.data not in ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']:
        cell = callback.data.split()
        if len(cell) < 5:
            cell.append('_')
        temp_num = file_list.cell(row=int(cell[0]), column=int(cell[1])).value
        if temp_num == None:
            file_list.cell(row=int(cell[0]), column=int(cell[1])).value = 0
        file_list.cell(row=int(cell[0]), column=int(cell[1])).value += 1
        temp_num = file_list.cell(row=int(cell[0]), column=int(cell[1])).value
        file.save('–ú–µ–Ω—é.xlsx')
        with open('–ó–∞–∫–∞–∑—ã.txt', 'r+') as orders_txt:
            user_food_name = cell[3] + ' ' + cell[4]
            food_name = file_list.cell(row=int(cell[0]), column=(int(cell[1])) - 1).value
            food_price = file_list.cell(row=int(cell[0]), column=(int(cell[1])) + 2).value
            id_food_name = id_generator(cell[3])
            new_food = f'{cell[2]}|{user_food_name}|{food_name}|{food_price}|{id_food_name}\n'
            orders_txt.seek(0, 2)
            orders_txt.write(new_food)
            orders_txt.seek(0)
            file_text = orders_txt.readlines()
            print(f'–°–¥–µ–ª–∞–Ω –∑–∞–∫–∞–∑: {cell[2]} {user_food_name} {food_name} {food_price} {id_food_name}')
            with open('–õ–æ–≥–∏.txt', 'a') as logs:
                time = datetime.datetime.now()
                logs.write(f'{str(time)[:19]} –°–¥–µ–ª–∞–Ω –∑–∞–∫–∞–∑: {cell[2]} | {user_food_name} | {food_name} | {food_price} | {id_food_name}\n')
        suff_day = days_suff[cell[2]]
        bot.send_message(callback.message.chat.id, f'–¢–≤–æ–π –∑–∞–∫–∞–∑: "{food_name}" –Ω–∞ <b>{suff_day}</b>', parse_mode='HTML')
    else:
        week_days = {'–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': monday_menu, '–í—Ç–æ—Ä–Ω–∏–∫': tuesday_menu, '–°—Ä–µ–¥–∞': wednesday_menu, '–ß–µ—Ç–≤–µ—Ä–≥': thursday_menu, '–ü—è—Ç–Ω–∏—Ü–∞': friday_menu}
        menu_for_the_day = types.InlineKeyboardMarkup()
        counter = 0
        callback_day = callback.data
        user_firstname = translit_name(callback.from_user.first_name)
        day = week_days[callback.data]
        button_order = types.InlineKeyboardButton(text=None, callback_data=None)
        for i in day:
            id_name_food = id_generator(user_firstname)
            user_name = translit_name(callback.from_user.first_name)
            user_lastname = translit_name(callback.from_user.last_name)
            temp_text = user_name + user_lastname
            button_order = types.InlineKeyboardButton(text=f'{i} ({day[i][0]} —Ä—É–±.)', callback_data=f'{day[i][1]} {day[i][2]} {callback_day} {user_name} {user_lastname}')
            menu_for_the_day.add(button_order)
            counter += 1
        button_back = types.InlineKeyboardButton(text='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –¥–µ–Ω—å', callback_data='–ù–∞–∑–∞–¥')
        menu_for_the_day.add(button_back)
        bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text=callback_day, reply_markup=menu_for_the_day)


# –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥
@bot.callback_query_handler(func=lambda msg: msg.data == '–ù–∞–∑–∞–¥')
def inline_back(callback):
    menu_week = types.InlineKeyboardMarkup(row_width=1)
    monday = types.InlineKeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', callback_data='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    tuesday = types.InlineKeyboardButton(text='–í—Ç–æ—Ä–Ω–∏–∫', callback_data='–í—Ç–æ—Ä–Ω–∏–∫')
    wednesday = types.InlineKeyboardButton(text='–°—Ä–µ–¥–∞', callback_data='–°—Ä–µ–¥–∞')
    thursday = types.InlineKeyboardButton(text='–ß–µ—Ç–≤–µ—Ä–≥', callback_data='–ß–µ—Ç–≤–µ—Ä–≥')
    friday = types.InlineKeyboardButton(text='–ü—è—Ç–Ω–∏—Ü–∞', callback_data='–ü—è—Ç–Ω–∏—Ü–∞')
    menu_week.add(monday, tuesday, wednesday, thursday, friday)
    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.id, text='–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏', reply_markup=menu_week)


# –ö–Ω–æ–ø–∫–∞ –û–ø–ª–∞—Ç—ã
@bot.message_handler(func=lambda msg: msg.text == '–û–ø–ª–∞—Ç–∏—Ç—å –∑–∞–∫–∞–∑')
def pay_order(message):
    bot.send_message(message.chat.id, '–í–æ—Ç —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã —Ç–≤–æ–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n'
                                      'https://www.tinkoff.ru/rm/savelova.tatyana1/wCseS42762\n'
                                      '–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–æ—Ç—É —Ñ–æ—Ç–æ —Å —á–µ–∫–æ–º\n')



#–ö–Ω–æ–ø–∫–∞ –ú–æ–π –∑–∞–∫–∞–∑
@bot.message_handler(func=lambda msg: msg.text == '–ú–æ–π –∑–∞–∫–∞–∑')
def my_order(message):
    order_menu = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    week_menu_button = types.KeyboardButton(text='–ù–µ–¥–µ–ª—è')
    monday_button = types.KeyboardButton(text='–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    tuesday_button = types.KeyboardButton(text='–í—Ç–æ—Ä–Ω–∏–∫')
    wednesday_button = types.KeyboardButton(text='–°—Ä–µ–¥–∞')
    thursday_button = types.KeyboardButton(text='–ß–µ—Ç–≤–µ—Ä–≥')
    friday_button = types.KeyboardButton(text='–ü—è—Ç–Ω–∏—Ü–∞')
    back_button = types.KeyboardButton(text='–ù–∞–∑–∞–¥')
    delete_from_order = types.KeyboardButton(text='–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∑–∞–∫–∞–∑–∞')
    order_menu.add(monday_button, tuesday_button, wednesday_button)
    order_menu.add(tuesday_button, friday_button, week_menu_button)
    order_menu.add(delete_from_order)
    order_menu.add(back_button)
    bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é ‚¨á', reply_markup=order_menu)



# –ö–Ω–æ–ø–∫–∞ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑ –∑–∞ –Ω–µ–¥–µ–ª—é
@bot.message_handler(func=lambda msg: msg.text == '–ù–µ–¥–µ–ª—è')
def my_order_week(message):
    with open('–ó–∞–∫–∞–∑—ã.txt', 'r') as orders:
        name = message.from_user.first_name
        if message.from_user.last_name == None:
            lastname = '_'
        else:
            lastname = message.from_user.last_name
        name = translit_name(name)
        lastname = translit_name(lastname)
        user_fullname = name + ' ' + lastname
        text_orders = orders.readlines()
        all_suma = 0
        for j in range(5):
            day = just_days[j]
            text_to_edit = bot.send_message(message.chat.id, f'<b>{day}:</b>', parse_mode='HTML')
            suma_order = 0
            count = 1
            for i in text_orders:
                order_message = i.split('|')
                if order_message[0] == day and order_message[1] == user_fullname:
                    bot.send_message(message.chat.id, f'{count}. {order_message[2]} <i>{order_message[3]}</i>', parse_mode='HTML')
                    suma_order += int(order_message[3])
                    all_suma += int(order_message[3])
                    count += 1
            if suma_order != 0:
                bot.edit_message_text(chat_id=message.chat.id, message_id=text_to_edit.message_id, text = f'<b>{day}:</b>\n<u>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {suma_order}</u> ‚ÇΩ', parse_mode='HTML')
            else:
                bot.edit_message_text(chat_id=message.chat.id, message_id=text_to_edit.message_id, text=f'<b>{day}:</b>\n–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–Ω–æ', parse_mode='HTML')
    bot.send_message(message.chat.id, f'<b>–ò—Ç–æ–≥–æ:</b> <i>{all_suma}</i> ‚ÇΩ', parse_mode='HTML')


# –ó–∞–∫–∞–∑—ã –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
@bot.message_handler(func=lambda msg: msg.text in just_days)
def day_order(message):
    with open('–ó–∞–∫–∞–∑—ã.txt', 'r') as orders:
        name = message.from_user.first_name
        if message.from_user.last_name == None:
            lastname = '_'
        else:
            lastname = message.from_user.last_name
        name = translit_name(name)
        lastname = translit_name(lastname)
        user_fullname = name + ' ' + lastname
        text_orders = orders.readlines()
        day = message.text
        text_to_edit = bot.send_message(message.chat.id, f'<b>{day}:</b>', parse_mode='HTML')
        suma_order = 0
        count = 1
        for i in text_orders:
            order_message = i.split('|')
            if order_message[0] == day and order_message[1] == user_fullname:
                bot.send_message(message.chat.id, f'{count}. {order_message[2]} <i>{order_message[3]}</i>', parse_mode='HTML')
                suma_order += int(order_message[3])
                count += 1
        if suma_order != 0:
            bot.edit_message_text(chat_id=message.chat.id, message_id=text_to_edit.message_id, text=f'<b>{day}:</b>\n<u>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {suma_order}</u> ‚ÇΩ', parse_mode='HTML')
        else:
            bot.edit_message_text(chat_id=message.chat.id, message_id=text_to_edit.message_id, text=f'<b>{day}:</b>\n–ù–∏—á–µ–≥–æ –Ω–µ –∑–∞–∫–∞–∑–∞–Ω–æ', parse_mode='HTML')


# –ö–Ω–æ–ø–∫–∞ –£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∑–∞–∫–∞–∑–∞
@bot.message_handler(func=lambda msg: msg.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ –∏–∑ –∑–∞–∫–∞–∑–∞')
def delete_order_buttons(message):
    button_delete = types.InlineKeyboardButton(text=None, callback_data=None)
    with open('–ó–∞–∫–∞–∑—ã.txt') as order:
        new_temp = []
        text_order = order.readlines()
        menu_for_delete = types.InlineKeyboardMarkup()
        counter = 0
        for i in text_order:
            if len(i) < 3:
                continue
            else:
                user_firstname = message.from_user.first_name
                user_firstname = translit_name(user_firstname)
                button_order = types.InlineKeyboardButton(text=None, callback_data=None)
                if message.from_user.last_name == None:
                    user_lastname = '_'
                else:
                    user_lastname = message.from_user.last_name
                    user_lastname = translit_name(user_lastname)
                user_fool_name = user_firstname + ' ' + user_lastname
                name_of_order = i
                temp = i.strip().split('|')
                new_temp.append(temp)
        new_temp = sorted(new_temp, key = lambda x: days_for_sort[x[0]])
        for temp in new_temp:
            if user_fool_name in temp:
                price = temp[3]
                day = temp[0]
                id_food_name = temp[-1]
                name_food = temp[2]
                text_for_button = ' '.join(temp)
                button_delete = types.InlineKeyboardButton(text=f'{day}: {name_food} ({price} —Ä—É–±.)', callback_data=f'del{temp[-1]}')
                menu_for_delete.add(button_delete)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å', reply_markup=menu_for_delete)


@bot.callback_query_handler(func=lambda msg: msg.data[:3] == 'del')
def delete_order(callback):
    id_for_delete = callback.data[3:]
    with open('–ó–∞–∫–∞–∑—ã.txt', 'r') as orders_file:
        orders_text = orders_file.readlines()
        temp = list(map(lambda x: x.split('|'), orders_text))
        new_orders = []
    with open('–ó–∞–∫–∞–∑—ã.txt', 'w') as orders_file:
        for i in temp:
            if id_for_delete == i[-1].strip():
                bot.send_message(callback.message.chat.id, f'{i[2]} –Ω–∞ <b>{days_suff[i[0]]}</b> —É–¥–∞–ª–µ–Ω–æ', parse_mode='HTML')
                print(f'–£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑ {" ".join(i)}')
                with open('–õ–æ–≥–∏.txt', 'a') as logs:
                    time = datetime.datetime.now()
                    logs.write(f'{str(time)[:19]} –£–¥–∞–ª–µ–Ω –∑–∞–∫–∞–∑: {" | ".join(i)}')
                continue
            else:
                new_orders.append(i)
        for i in new_orders:
            new_text = '|'.join(i)
            orders_file.write(f'{new_text}\n')


@bot.message_handler(content_types=['sticker'])
def send_sticker(message):
    sticker_id = message.sticker.file_id
    if sticker_id not in stickers_id:
        stickers_id.append(sticker_id)
    bot.send_sticker(message.chat.id, random.choice(stickers_id))


# –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞
@bot.message_handler(content_types=['photo'])
def send_to_operators(message):
    for i in operators_id:
        bot.forward_message(i, message.chat.id, message.message_id)
    menu_pay_day = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    monday_pay = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫')
    tuesday_pay = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫')
    wednesday_pay = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∑–∞ —Å—Ä–µ–¥—É')
    thursday_pay = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∑–∞ —á–µ—Ç–≤–µ—Ä–≥')
    friday_pay = types.KeyboardButton('–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É')
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    menu_pay_day.add(monday_pay, tuesday_pay, wednesday_pay, thursday_pay, friday_pay, back_button)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –∑–∞ –∫–∞–∫–æ–π –¥–µ–Ω—å –±—ã–ª–∞ –æ–ø–ª–∞—Ç–∞ ‚¨á', reply_markup=menu_pay_day)
    bill_list.append(message.message_id)


@bot.message_handler(func=lambda msg: msg.text in ['–û–ø–ª–∞—Ç–∞ –∑–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–û–ø–ª–∞—Ç–∞ –∑–∞ –≤—Ç–æ—Ä–Ω–∏–∫', '–û–ø–ª–∞—Ç–∞ –∑–∞ —Å—Ä–µ–¥—É', '–û–ø–ª–∞—Ç–∞ –∑–∞ —á–µ—Ç–≤–µ—Ä–≥', '–û–ø–ª–∞—Ç–∞ –∑–∞ –ø—è—Ç–Ω–∏—Ü—É'])
def pay_day(message):
    for i in operators_id:
        bot.forward_message(i, message.chat.id, message.message_id)


@bot.message_handler(commands=['id'])
def command_id(message):
    bot.send_message(message.chat.id, f'Name: {message.from_user.first_name}\n'
                                      f'Surname: {message.from_user.last_name}\n'
                                      f'Nickname: {message.from_user.username}\n'
                                      f'ID: {message.from_user.id}')


print('–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ')
bot.polling()
